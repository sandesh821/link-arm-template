{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
    "templateDeploy": {
      "type": "string",
      "metadata": {
        "description": "description"
      }
    },
//-------------------------------------------------------------------------------------------
    "StorageAccountName":{
        "type": "string",
          "metadata": {
              "description": "Storage Account name"
          }
      },
      "HierarchicalNamespace": {
          "type": "string",
          "metadata": {
              "description": "create gen2 storage account"
          }
      },
    
      // app service parameters
      "appServiceName": {
        "type": "string"
      },
      "appServicePlanName": {
        "type": "string",
        "minLength": 1
      },
      "appServicePlanSkuName": {
        "type": "string",
        "defaultValue": "B1",
        "allowedValues": [
          "F1",
          "D1",
          "B1",
          "B2",
          "B3",
          "S1",
          "S2",
          "S3",
          "P1",
          "P2"
        ]
        
      },
    // Datafactory name 
      "datafactoryname": {
          "type": "string",
          "metadata": {
              "description": "description"
          }
      },
      "keyVaultName": {
    "type": "string",
    "metadata": {
      "description": "Specifies the name of the key vault."
    }
    },
    
    "skuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ]
      
    },
     "enabledForDeployment": {
        "type": "Bool",
        "defaultValue": false,
        "metadata": {
            "description": "description"
        }
    },
    "keysPermissions-AS": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
      }
    },
    "secretsPermissions-AS": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, backup, restore, recover, and purge."
      }
    },
    "certificatePermissions-AS": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to certificates in the vault. Valid values are: all,  create, delete, update, deleteissuers, get, getissuers, import, list, listissuers, managecontacts, manageissuers,  recover, backup, restore, setissuers, and purge."
      }
    },
    "keysPermissions-DF": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
      }
    },
    "secretsPermissions-DF": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, backup, restore, recover, and purge."
      }
    },
    "certificatePermissions-DF": {
      "type": "array",
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Specifies the permissions to certificates in the vault. Valid values are: all,  create, delete, update, deleteissuers, get, getissuers, import, list, listissuers, managecontacts, manageissuers,  recover, backup, restore, setissuers, and purge."
      }
    },
        "name": {
            "type": "string"
        },
        "defaultDataLakeStorageAccountName": {
            "type": "string"
        },
        "defaultDataLakeStorageFilesystemName": {
            "type": "string"
        },
        "sqlAdministratorLogin": {
            "type": "string"
        },
        "sqlAdministratorLoginPassword": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },

        "managedVirtualNetwork": {
            "type": "string",
            "allowedValues": [
                "default",
                ""
            ]
        }
//-------------------------------------------------------------------------------------------
    },
    "resources": [
      {
        // storage account
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name": "storage-child",
        "properties": {
          "mode": "Incremental",
          "templateLink":{
            "uri": "[concat(parameters('templateDeploy'), 'storageaccount.json')]"
          },
          "parameters": {
                    "StorageAccountName": {
                        "value": "[parameters('StorageAccountName')]"
                    },
                    "HierarchicalNamespace":{
                        "value": "[parameters('HierarchicalNamespace')]"
                    }
          }
       }
      },

      {
        // app service child
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name": "app-service-child",
        "properties": {
          "mode": "Incremental",
          "templateLink":{
            "uri": "[concat(parameters('templateDeploy'), 'appservice.json')]"
          },
          "parameters": {
                    "appServiceName": {
                        "value": "[parameters('appServiceName')]"
                    },
                    "appServicePlanName":{
                        "value": "[parameters('appServicePlanName')]"
                    },
                    "appServicePlanSkuName": {
                      "value": "[parameters('appServicePlanSkuName')]"
                    }

          }

      }
      },
      {
        //child data factory storage account
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name": "datafactory-child",
        "dependsOn": ["[resourceId('Microsoft.Resources/deployments', 'storage-child')]"],
        "properties": {
          "mode": "Incremental",
          "templateLink":{
            "uri": "[concat(parameters('templateDeploy'), 'datafactory.json')]"
          },
          "parameters": {
              "datafactoryname": {
                "value": "[parameters('datafactoryname')]"
              }
          }
      }
      },
      {
        //child synapse storage account
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name": "synapse-child",
        "properties": {
          "mode": "Incremental",
          "templateLink":{
            "uri": "[concat(parameters('templateDeploy'), 'synapse.json')]"
          },
          "parameters": {
              "name": {
                "value": "[parameters('name')]"
              },
              "defaultDataLakeStorageAccountName": {
                "value": "[parameters('defaultDataLakeStorageAccountName')]"
              },
             
              "defaultDataLakeStorageFilesystemName": {
                "value": "[parameters('defaultDataLakeStorageFilesystemName')]"
              },
              "sqlAdministratorLogin": {
                "value": "[parameters('sqlAdministratorLogin')]"
              },
              "sqlAdministratorLoginPassword": {
                "value": "[parameters('sqlAdministratorLoginPassword')]"
              },
              "managedVirtualNetwork": {
                "value": "[parameters('managedVirtualNetwork')]"
              }

            }
        } 
      },
      {
        //child key vault 
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2021-04-01",
        "name": "keyVaults-child",
        "dependsOn": ["[resourceId('Microsoft.Resources/deployments', 'app-service-child')]"],
        "properties": {
          "mode": "Incremental",
          "templateLink":{
            "uri": "[concat(parameters('templateDeploy'), 'keyvault.json')]"
          },
          "parameters": {
              "keyVaultName": {
                "value": "[parameters('keyVaultName')]"
              },
              "skuName": {
                "value": "[parameters('skuName')]"
              },
              "enabledForDeployment": {
                "value": "[parameters('enabledForDeployment')]"
              },
              "keysPermissions-AS": {
                "value": "[parameters('keysPermissions-AS')]"
              },
              "secretsPermissions-AS": {
                "value": "[parameters('secretsPermissions-AS')]"
              },
              "certificatePermissions-AS": {
                "value": "[parameters('certificatePermissions-AS')]"
              },
              "keysPermissions-DF": {
                "value": "[parameters('keysPermissions-DF')]"
              },
              "secretsPermissions-DF": {
                "value": "[parameters('secretsPermissions-DF')]"
              },
              "certificatePermissions-DF": {
                "value": "[parameters('certificatePermissions-DF')]"
              },
              "datafactoryname": {
                "value": "[parameters('datafactoryname')]"
              },
              "appServiceName": {
                        "value": "[parameters('appServiceName')]"
                    }



          
         }
       }

      }
      
    ],
    "outputs": {}
  }